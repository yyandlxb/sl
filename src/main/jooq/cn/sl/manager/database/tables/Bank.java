/*
 * This file is generated by jOOQ.
 */
package cn.sl.manager.database.tables;


import cn.sl.manager.database.Keys;
import cn.sl.manager.database.Sl;
import cn.sl.manager.database.tables.records.BankRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bank extends TableImpl<BankRecord> {

    private static final long serialVersionUID = 1497472966;

    /**
     * The reference instance of <code>sl.bank</code>
     */
    public static final Bank BANK = new Bank();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankRecord> getRecordType() {
        return BankRecord.class;
    }

    /**
     * The column <code>sl.bank.id</code>.
     */
    public final TableField<BankRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sl.bank.name</code>.
     */
    public final TableField<BankRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>sl.bank.code</code>.
     */
    public final TableField<BankRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>sl.bank.user_id</code>.
     */
    public final TableField<BankRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sl.bank.user_name</code>.
     */
    public final TableField<BankRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>sl.bank.create_at</code>.
     */
    public final TableField<BankRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>sl.bank</code> table reference
     */
    public Bank() {
        this(DSL.name("bank"), null);
    }

    /**
     * Create an aliased <code>sl.bank</code> table reference
     */
    public Bank(String alias) {
        this(DSL.name(alias), BANK);
    }

    /**
     * Create an aliased <code>sl.bank</code> table reference
     */
    public Bank(Name alias) {
        this(alias, BANK);
    }

    private Bank(Name alias, Table<BankRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bank(Name alias, Table<BankRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Bank(Table<O> child, ForeignKey<O, BankRecord> key) {
        super(child, key, BANK);
    }

    @Override
    public Schema getSchema() {
        return Sl.SL;
    }

    @Override
    public Identity<BankRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BANK;
    }

    @Override
    public UniqueKey<BankRecord> getPrimaryKey() {
        return Keys.KEY_BANK_PRIMARY;
    }

    @Override
    public List<UniqueKey<BankRecord>> getKeys() {
        return Arrays.<UniqueKey<BankRecord>>asList(Keys.KEY_BANK_PRIMARY, Keys.KEY_BANK_UK_CODE);
    }

    @Override
    public Bank as(String alias) {
        return new Bank(DSL.name(alias), this);
    }

    @Override
    public Bank as(Name alias) {
        return new Bank(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(String name) {
        return new Bank(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bank rename(Name name) {
        return new Bank(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, Integer, String, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
