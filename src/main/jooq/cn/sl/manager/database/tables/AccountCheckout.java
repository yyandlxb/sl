/*
 * This file is generated by jOOQ.
 */
package cn.sl.manager.database.tables;


import cn.sl.manager.database.Keys;
import cn.sl.manager.database.Sl;
import cn.sl.manager.database.tables.records.AccountCheckoutRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountCheckout extends TableImpl<AccountCheckoutRecord> {

    private static final long serialVersionUID = 2140597694;

    /**
     * The reference instance of <code>sl.account_checkout</code>
     */
    public static final AccountCheckout ACCOUNT_CHECKOUT = new AccountCheckout();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountCheckoutRecord> getRecordType() {
        return AccountCheckoutRecord.class;
    }

    /**
     * The column <code>sl.account_checkout.id</code>.
     */
    public final TableField<AccountCheckoutRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sl.account_checkout.fee</code>.
     */
    public final TableField<AccountCheckoutRecord, BigDecimal> FEE = createField(DSL.name("fee"), org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>sl.account_checkout.status</code>. 0-正在处理，1-已完成
     */
    public final TableField<AccountCheckoutRecord, Byte> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.TINYINT)), this, "0-正在处理，1-已完成");

    /**
     * The column <code>sl.account_checkout.create_at</code>.
     */
    public final TableField<AccountCheckoutRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>sl.account_checkout.update_at</code>.
     */
    public final TableField<AccountCheckoutRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>sl.account_checkout.user_id</code>.
     */
    public final TableField<AccountCheckoutRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sl.account_checkout.bank_id</code>.
     */
    public final TableField<AccountCheckoutRecord, Integer> BANK_ID = createField(DSL.name("bank_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sl.account_checkout.remark</code>.
     */
    public final TableField<AccountCheckoutRecord, String> REMARK = createField(DSL.name("remark"), org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>sl.account_checkout.code</code>.
     */
    public final TableField<AccountCheckoutRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>sl.account_checkout.userName</code>.
     */
    public final TableField<AccountCheckoutRecord, String> USERNAME = createField(DSL.name("userName"), org.jooq.impl.SQLDataType.VARCHAR(22).nullable(false), this, "");

    /**
     * Create a <code>sl.account_checkout</code> table reference
     */
    public AccountCheckout() {
        this(DSL.name("account_checkout"), null);
    }

    /**
     * Create an aliased <code>sl.account_checkout</code> table reference
     */
    public AccountCheckout(String alias) {
        this(DSL.name(alias), ACCOUNT_CHECKOUT);
    }

    /**
     * Create an aliased <code>sl.account_checkout</code> table reference
     */
    public AccountCheckout(Name alias) {
        this(alias, ACCOUNT_CHECKOUT);
    }

    private AccountCheckout(Name alias, Table<AccountCheckoutRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountCheckout(Name alias, Table<AccountCheckoutRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AccountCheckout(Table<O> child, ForeignKey<O, AccountCheckoutRecord> key) {
        super(child, key, ACCOUNT_CHECKOUT);
    }

    @Override
    public Schema getSchema() {
        return Sl.SL;
    }

    @Override
    public Identity<AccountCheckoutRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_CHECKOUT;
    }

    @Override
    public UniqueKey<AccountCheckoutRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNT_CHECKOUT_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountCheckoutRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountCheckoutRecord>>asList(Keys.KEY_ACCOUNT_CHECKOUT_PRIMARY);
    }

    @Override
    public AccountCheckout as(String alias) {
        return new AccountCheckout(DSL.name(alias), this);
    }

    @Override
    public AccountCheckout as(Name alias) {
        return new AccountCheckout(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountCheckout rename(String name) {
        return new AccountCheckout(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountCheckout rename(Name name) {
        return new AccountCheckout(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, BigDecimal, Byte, LocalDateTime, LocalDateTime, Integer, Integer, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
