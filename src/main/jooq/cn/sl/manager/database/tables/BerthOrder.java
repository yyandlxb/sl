/*
 * This file is generated by jOOQ.
 */
package cn.sl.manager.database.tables;


import cn.sl.manager.database.Keys;
import cn.sl.manager.database.Sl;
import cn.sl.manager.database.tables.records.BerthOrderRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BerthOrder extends TableImpl<BerthOrderRecord> {

    private static final long serialVersionUID = 1785225445;

    /**
     * The reference instance of <code>sl.berth_order</code>
     */
    public static final BerthOrder BERTH_ORDER = new BerthOrder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BerthOrderRecord> getRecordType() {
        return BerthOrderRecord.class;
    }

    /**
     * The column <code>sl.berth_order.id</code>.
     */
    public final TableField<BerthOrderRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sl.berth_order.berth_id</code>.
     */
    public final TableField<BerthOrderRecord, Integer> BERTH_ID = createField(DSL.name("berth_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sl.berth_order.start_at</code>.
     */
    public final TableField<BerthOrderRecord, LocalDateTime> START_AT = createField(DSL.name("start_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>sl.berth_order.status</code>.
     */
    public final TableField<BerthOrderRecord, Byte> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>sl.berth_order.end_at</code>.
     */
    public final TableField<BerthOrderRecord, LocalDateTime> END_AT = createField(DSL.name("end_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>sl.berth_order.created_at</code>.
     */
    public final TableField<BerthOrderRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>sl.berth_order.fee</code>.
     */
    public final TableField<BerthOrderRecord, BigDecimal> FEE = createField(DSL.name("fee"), org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sl.berth_order.user_id</code>.
     */
    public final TableField<BerthOrderRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sl.berth_order.practical_fee</code>.
     */
    public final TableField<BerthOrderRecord, BigDecimal> PRACTICAL_FEE = createField(DSL.name("practical_fee"), org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false).defaultValue(org.jooq.impl.DSL.inline("0.00", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sl.berth_order.accounts_type</code>. 0-完成结算
     */
    public final TableField<BerthOrderRecord, Byte> ACCOUNTS_TYPE = createField(DSL.name("accounts_type"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0-完成结算");

    /**
     * The column <code>sl.berth_order.leave_at</code>.
     */
    public final TableField<BerthOrderRecord, LocalDateTime> LEAVE_AT = createField(DSL.name("leave_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>sl.berth_order</code> table reference
     */
    public BerthOrder() {
        this(DSL.name("berth_order"), null);
    }

    /**
     * Create an aliased <code>sl.berth_order</code> table reference
     */
    public BerthOrder(String alias) {
        this(DSL.name(alias), BERTH_ORDER);
    }

    /**
     * Create an aliased <code>sl.berth_order</code> table reference
     */
    public BerthOrder(Name alias) {
        this(alias, BERTH_ORDER);
    }

    private BerthOrder(Name alias, Table<BerthOrderRecord> aliased) {
        this(alias, aliased, null);
    }

    private BerthOrder(Name alias, Table<BerthOrderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BerthOrder(Table<O> child, ForeignKey<O, BerthOrderRecord> key) {
        super(child, key, BERTH_ORDER);
    }

    @Override
    public Schema getSchema() {
        return Sl.SL;
    }

    @Override
    public Identity<BerthOrderRecord, Integer> getIdentity() {
        return Keys.IDENTITY_BERTH_ORDER;
    }

    @Override
    public UniqueKey<BerthOrderRecord> getPrimaryKey() {
        return Keys.KEY_BERTH_ORDER_PRIMARY;
    }

    @Override
    public List<UniqueKey<BerthOrderRecord>> getKeys() {
        return Arrays.<UniqueKey<BerthOrderRecord>>asList(Keys.KEY_BERTH_ORDER_PRIMARY);
    }

    @Override
    public BerthOrder as(String alias) {
        return new BerthOrder(DSL.name(alias), this);
    }

    @Override
    public BerthOrder as(Name alias) {
        return new BerthOrder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BerthOrder rename(String name) {
        return new BerthOrder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BerthOrder rename(Name name) {
        return new BerthOrder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, LocalDateTime, Byte, LocalDateTime, LocalDateTime, BigDecimal, Integer, BigDecimal, Byte, LocalDateTime> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
