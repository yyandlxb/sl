/*
 * This file is generated by jOOQ.
 */
package cn.sl.manager.database.tables;


import cn.sl.manager.database.Keys;
import cn.sl.manager.database.Sl;
import cn.sl.manager.database.tables.records.AccountRecordRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends TableImpl<AccountRecordRecord> {

    private static final long serialVersionUID = -1413876995;

    /**
     * The reference instance of <code>sl.account_record</code>
     */
    public static final AccountRecord ACCOUNT_RECORD = new AccountRecord();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecordRecord> getRecordType() {
        return AccountRecordRecord.class;
    }

    /**
     * The column <code>sl.account_record.id</code>.
     */
    public final TableField<AccountRecordRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sl.account_record.user_id</code>.
     */
    public final TableField<AccountRecordRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sl.account_record.fee</code>.
     */
    public final TableField<AccountRecordRecord, BigDecimal> FEE = createField(DSL.name("fee"), org.jooq.impl.SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>sl.account_record.created_at</code>.
     */
    public final TableField<AccountRecordRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>sl.account_record.remark</code>.
     */
    public final TableField<AccountRecordRecord, String> REMARK = createField(DSL.name("remark"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>sl.account_record</code> table reference
     */
    public AccountRecord() {
        this(DSL.name("account_record"), null);
    }

    /**
     * Create an aliased <code>sl.account_record</code> table reference
     */
    public AccountRecord(String alias) {
        this(DSL.name(alias), ACCOUNT_RECORD);
    }

    /**
     * Create an aliased <code>sl.account_record</code> table reference
     */
    public AccountRecord(Name alias) {
        this(alias, ACCOUNT_RECORD);
    }

    private AccountRecord(Name alias, Table<AccountRecordRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountRecord(Name alias, Table<AccountRecordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> AccountRecord(Table<O> child, ForeignKey<O, AccountRecordRecord> key) {
        super(child, key, ACCOUNT_RECORD);
    }

    @Override
    public Schema getSchema() {
        return Sl.SL;
    }

    @Override
    public Identity<AccountRecordRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNT_RECORD;
    }

    @Override
    public UniqueKey<AccountRecordRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNT_RECORD_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountRecordRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecordRecord>>asList(Keys.KEY_ACCOUNT_RECORD_PRIMARY);
    }

    @Override
    public AccountRecord as(String alias) {
        return new AccountRecord(DSL.name(alias), this);
    }

    @Override
    public AccountRecord as(Name alias) {
        return new AccountRecord(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountRecord rename(String name) {
        return new AccountRecord(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountRecord rename(Name name) {
        return new AccountRecord(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, BigDecimal, LocalDateTime, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
