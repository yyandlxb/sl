/*
 * This file is generated by jOOQ.
 */
package cn.sl.manager.database.tables.records;


import cn.sl.manager.database.tables.AccountCheckout;

import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record10;
import org.jooq.Row10;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountCheckoutRecord extends UpdatableRecordImpl<AccountCheckoutRecord> implements Record10<Integer, BigDecimal, Byte, LocalDateTime, LocalDateTime, Integer, Integer, String, String, String> {

    private static final long serialVersionUID = 412907289;

    /**
     * Setter for <code>sl.account_checkout.id</code>.
     */
    public AccountCheckoutRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>sl.account_checkout.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>sl.account_checkout.fee</code>.
     */
    public AccountCheckoutRecord setFee(BigDecimal value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>sl.account_checkout.fee</code>.
     */
    public BigDecimal getFee() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>sl.account_checkout.status</code>. 0-正在处理，1-已完成
     */
    public AccountCheckoutRecord setStatus(Byte value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>sl.account_checkout.status</code>. 0-正在处理，1-已完成
     */
    public Byte getStatus() {
        return (Byte) get(2);
    }

    /**
     * Setter for <code>sl.account_checkout.create_at</code>.
     */
    public AccountCheckoutRecord setCreateAt(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>sl.account_checkout.create_at</code>.
     */
    public LocalDateTime getCreateAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>sl.account_checkout.update_at</code>.
     */
    public AccountCheckoutRecord setUpdateAt(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>sl.account_checkout.update_at</code>.
     */
    public LocalDateTime getUpdateAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>sl.account_checkout.user_id</code>.
     */
    public AccountCheckoutRecord setUserId(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>sl.account_checkout.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>sl.account_checkout.bank_id</code>.
     */
    public AccountCheckoutRecord setBankId(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>sl.account_checkout.bank_id</code>.
     */
    public Integer getBankId() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>sl.account_checkout.remark</code>.
     */
    public AccountCheckoutRecord setRemark(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>sl.account_checkout.remark</code>.
     */
    public String getRemark() {
        return (String) get(7);
    }

    /**
     * Setter for <code>sl.account_checkout.code</code>.
     */
    public AccountCheckoutRecord setCode(String value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>sl.account_checkout.code</code>.
     */
    public String getCode() {
        return (String) get(8);
    }

    /**
     * Setter for <code>sl.account_checkout.userName</code>.
     */
    public AccountCheckoutRecord setUsername(String value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>sl.account_checkout.userName</code>.
     */
    public String getUsername() {
        return (String) get(9);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, BigDecimal, Byte, LocalDateTime, LocalDateTime, Integer, Integer, String, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }

    @Override
    public Row10<Integer, BigDecimal, Byte, LocalDateTime, LocalDateTime, Integer, Integer, String, String, String> valuesRow() {
        return (Row10) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return AccountCheckout.ACCOUNT_CHECKOUT.ID;
    }

    @Override
    public Field<BigDecimal> field2() {
        return AccountCheckout.ACCOUNT_CHECKOUT.FEE;
    }

    @Override
    public Field<Byte> field3() {
        return AccountCheckout.ACCOUNT_CHECKOUT.STATUS;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return AccountCheckout.ACCOUNT_CHECKOUT.CREATE_AT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return AccountCheckout.ACCOUNT_CHECKOUT.UPDATE_AT;
    }

    @Override
    public Field<Integer> field6() {
        return AccountCheckout.ACCOUNT_CHECKOUT.USER_ID;
    }

    @Override
    public Field<Integer> field7() {
        return AccountCheckout.ACCOUNT_CHECKOUT.BANK_ID;
    }

    @Override
    public Field<String> field8() {
        return AccountCheckout.ACCOUNT_CHECKOUT.REMARK;
    }

    @Override
    public Field<String> field9() {
        return AccountCheckout.ACCOUNT_CHECKOUT.CODE;
    }

    @Override
    public Field<String> field10() {
        return AccountCheckout.ACCOUNT_CHECKOUT.USERNAME;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public BigDecimal component2() {
        return getFee();
    }

    @Override
    public Byte component3() {
        return getStatus();
    }

    @Override
    public LocalDateTime component4() {
        return getCreateAt();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateAt();
    }

    @Override
    public Integer component6() {
        return getUserId();
    }

    @Override
    public Integer component7() {
        return getBankId();
    }

    @Override
    public String component8() {
        return getRemark();
    }

    @Override
    public String component9() {
        return getCode();
    }

    @Override
    public String component10() {
        return getUsername();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public BigDecimal value2() {
        return getFee();
    }

    @Override
    public Byte value3() {
        return getStatus();
    }

    @Override
    public LocalDateTime value4() {
        return getCreateAt();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateAt();
    }

    @Override
    public Integer value6() {
        return getUserId();
    }

    @Override
    public Integer value7() {
        return getBankId();
    }

    @Override
    public String value8() {
        return getRemark();
    }

    @Override
    public String value9() {
        return getCode();
    }

    @Override
    public String value10() {
        return getUsername();
    }

    @Override
    public AccountCheckoutRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public AccountCheckoutRecord value2(BigDecimal value) {
        setFee(value);
        return this;
    }

    @Override
    public AccountCheckoutRecord value3(Byte value) {
        setStatus(value);
        return this;
    }

    @Override
    public AccountCheckoutRecord value4(LocalDateTime value) {
        setCreateAt(value);
        return this;
    }

    @Override
    public AccountCheckoutRecord value5(LocalDateTime value) {
        setUpdateAt(value);
        return this;
    }

    @Override
    public AccountCheckoutRecord value6(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public AccountCheckoutRecord value7(Integer value) {
        setBankId(value);
        return this;
    }

    @Override
    public AccountCheckoutRecord value8(String value) {
        setRemark(value);
        return this;
    }

    @Override
    public AccountCheckoutRecord value9(String value) {
        setCode(value);
        return this;
    }

    @Override
    public AccountCheckoutRecord value10(String value) {
        setUsername(value);
        return this;
    }

    @Override
    public AccountCheckoutRecord values(Integer value1, BigDecimal value2, Byte value3, LocalDateTime value4, LocalDateTime value5, Integer value6, Integer value7, String value8, String value9, String value10) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountCheckoutRecord
     */
    public AccountCheckoutRecord() {
        super(AccountCheckout.ACCOUNT_CHECKOUT);
    }

    /**
     * Create a detached, initialised AccountCheckoutRecord
     */
    public AccountCheckoutRecord(Integer id, BigDecimal fee, Byte status, LocalDateTime createAt, LocalDateTime updateAt, Integer userId, Integer bankId, String remark, String code, String username) {
        super(AccountCheckout.ACCOUNT_CHECKOUT);

        set(0, id);
        set(1, fee);
        set(2, status);
        set(3, createAt);
        set(4, updateAt);
        set(5, userId);
        set(6, bankId);
        set(7, remark);
        set(8, code);
        set(9, username);
    }
}
